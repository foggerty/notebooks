* Todo
- [ ] Clone [[https://github.com/godotengine/godot-demo-projects][all of these]].
- [ ] Play with / break a few :-)
* Language
Each file is a class

#+begin_src python
class_name Fred
# or:
extends Fred
#+end_src

Member variables are declared with var, and dictionary literals are supported:

#+begin_src python
var some_int = 10
var str = "Hello"
var dict = {"key": "value", 2: 3}

# note: can use Lua style dictionaries, so no need to quote keys:
var dict2 = {key = value, dog = "Fred"}
# however, cannot use numbers as keys.
#+end_src

ALWAYS use `:=` to assign variables, as it enforces static typing, which has a rather large performance advantage (and also gives you better code-hints in the IDE).

#+begin_src python
# Instaed of:
var fred = 0;
#use:
var fred := 0;
#+end_src

GDScript is a white-space indentation thingie language, so functions and loops etc are defined like so:

#+begin_src python
func some_useless_function(param1, param2)
    if param1 == param2
        return 1
    elif param1 > 100
        return 2
    else:
        return 234

    for i in range(10)
        print(i)

    while param1 < param2
        # do amazing things with other thigs

    return 0
#+end_src

** Classes
Each file represents a class.  Define a class with the ~class~ keyword, followed by any member variables.

#+begin_src python
class Fred
    var a = 10

# define constructirs like so:
func _init()
    # setup

func DoStuff()
    # stuff

# if a subclass wants to override a method, can call the base one like so:
func DoStuff(a, b) # in child class
    super(a, b) # do parent's stuff
    super.anotherMethod(a, b) # call method in parent class
    

# If you want your node derived class to have an icon in the editor:
extends Node
class_name MyThingie, "res://assets/icons/thingie.png"

# Even if a file doesn't specify a class name, you can still descend from it, like so:
extends "some_other_file.gd"

# to pass paramaters to a parent constructor, use:
func _init(args).(parent_args)

# Settets/getters
var some_var setget set_function, get_function
#+end_src

** Basic types
Unless you're using ~PoolIntArray~ or one of its variants, arrays can contain different types.

#+begin_src python
# constants:
const fred = "Fred"
const life = 42

# Enums (don't need to be named):
enum {FIRST, SECOND, THIRD}
enum Days {MON, TUE, WED}

# Vector types, 2D and 3D:
var v2d = Vector(1, 2)
var v3d = Vector(1, 2, 3)

# Can have multo-line string with tripple quotes:
"""multi-line
string"""

#"Node/Label" # path to a node
@NodePath # shorthand for get_node("NodePath")

# access the last element of an array with a negative index:
var f = arr[-1] # equivilent to arr[arr.size() - 1]

# Variable declaration:
var a = 2  # dynamic var, can have any type assigned to it
var b := 2 # can only have ints asgigned to it
var c: int # can only have ints assigned to it
#+end_src

** yield/resume
#+begin_src python
# Coroutines, basically.  Yield will return to caller, saving current state of function saved.  Caller can then call .resume() on the returned object to return back to it.

func yielding_func()
    print("Hello ")
    print(yield())
    print(" World")

func calling_func()
    var f = yielding_func()
    # do stuff
    f.resume("Bastard")  # can pass paramaters to resume, will be result of yield() func

    # prints "Hello Bastard World"
#+end_src

There's a lot more here to do with signals that I'm too tired to go through right now :-)

* Nodes (and scenes)
"My god, it's full of nodes....."

Nodes are the building blocks of Godot (and the smallest "thing"), and every node can (optionally) receive a callback per-frame or physics tick.  Nodes can have other nodes as children nodes.

Instead of a 'main' function, there need to be a 'main.gd' node.

Nodes are collected together in a scene's scene tree.  While they may look the same in the editor browser, a scene (which will contain may nodes and sub-nodes) will appear as a single 'node' in the browser.

A scene has a single root node (which can then contain other nodes), can be saved/loaded to disk, and can be instanced as needed.  One scene must be the main scene.  Note that scenes are also nodes, as they can be made the children of nodes.

A Room scene would hold a table scene, which would hold a vase, plate, mug etc.  The vase could then hold flowers.  i.e. a hierarchy of objects/containers.

Nodes can be added to as many groups as you want (~add_to_group, is_in_group, remove_from_group~).  Groups are just used for organisation, if you (say) need to iterate through all nodes in the 'enemies' group.  You can then send a signal to all nodes in a group with ~get_tree().call_group("enemies", "start_hunting_player")~.  You can get all nodes in a group with ~get_tree().get_nodes_in_group("enemies")~

~s = NodeName.new()~ / ~s.free()~  <= create and delete in code.  Note that ~s.queue_free()~ is preferred, as it a) adds the freeing to a queue that b) avoids a crash if the node in question is receiving a signal or calling a function.

NOTE: while scenes are nodes under the hood, you cannot just instance one like you would a node.  They need to be loaded from file first:

#+begin_src python
var scene = load("res://somescene.tscn")

# or, preload in the _ready() function, as this will be run at parse time:
var scene = preload("res://somescene.tscn")

# scenes are loaded in as a PackaedScene, and need to be unpacked
# before the tree of nodes can be used:
var sceneNode = scene.instance()
add_child(sceneNode)
#+end_src

* Notifications
 - NOTIFICATION_ENTER_TREE (_enter_tree) :: When added to a scene tree.  Called in order of parent->child.
 - NOTIFICATION_READY (_ready) :: When all nodes have been added to tree.  Called in order of child-parent.
 - _process :: called each frame.
 - _physics_process :: usually set at 60 times a second.
 - _input :: called for input events.  /Warning/ - this is called for each node that implements it.  Prefer ~_unhandled_input~ instead, so receives events that were not handled by anything else.

* Signals
*NOTE:* when connecting signals via the node editor, you need to first make sure that the target node has a script attached to it.

Note that the convention is to use past-tense when naming signals.

Signals should be preferred to using code like `get_parent()`, because (again) a node should have as little knowledge about it's environment as possible.  One reason, is that it makes moving the node around dynamically difficult, as `get_parent()` will now return something different (which may or may not be desired).

Connect up signals like so:

#+begin_src python
func _ready():
	   $Timer.connect("timeout", self, "_on_Timer_timeout")

func _on_Timer_timeout():
    $Panel/Sprite.visible = !$Panel/Sprite.visible
#+end_src

Note that ~"timeout"~ is a signal that the timer /emits/.  By connecting to itself, the node above is subscribing to that particular signal.

Custom signals can be added to a node:

#+begin_src python
extends Node

signal my_signal(value, thing, wotsit)

# signal others with emit_signal:
my_signal.emit(thin, wotsit)
#+end_src

This signal will then appear in the inspector, and other nodes can subscribe to it.

* Reference counting / memory management
 - ~Object~ :: must use manual memory management.
 - ~Reference~ :: uses reference counting to nuke self when no more references to it exist.
 - ~Resource~ :: Can be viewed in the inspector, and know how to serialise/deserialise themselves to Godot resource files.

* GDScript
Each script 'extends' the class that it's attached to, i.e. a ~Label~ instance is the 'base' class, and the script extends it by overriding virtual methods.  That's how I think of it anyway.  Actual implementation may vary.

All virtual methods start with _

** get_node()
By default, get node uses the current node as the base node.  So ~get_node("Button")~ assumes that there is another node called "Button" that's a child of the node running the script.

To reference a child of a child, use ~get_node("Panel/Button")~.

Alternately (and this will enable code-complete) use the ~$~ shorthand, e.g. ~$Panel/Sprite.visible = false~.

IMPORTANT: the ~$~ shorthand ONLY works at run-time.  For compile time - i.e. using ~preload()~ you will need to a constant string.

* Best practices
Each scene should be able to be instanced without knowing much, if anything about the environment in which it's being created.  Also, /"you should create scenes that keep everything they need within themselves."/

If scenes need to know about each other, they should do so via signals.

Where state /does/ need to be shared (i.e. scores, player info) then [[https://docs.godotengine.org/en/stable/getting_started/step_by_step/singletons_autoload.html#doc-singletons-autoload][use singletons and autoload.]]

If a child node, for whatever reason, shouldn't inherit the transforms of its parent, insert a ~Node~ between them.  This base class doesn't pass down transformations.

Scenes vs scripts - scripts give behaviour to scenes, scenes provide an API for scripts.  While scripts can generate scenes (i.e. instantiate a bunch of nodes and set relationships) this is not recommended for large scenes, owing to interpreter speed.

